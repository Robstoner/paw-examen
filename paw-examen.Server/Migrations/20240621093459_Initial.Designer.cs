// <auto-generated />
using System;
using ExamPrep.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace paw_examen.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240621093459_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("paw_examen.Server.Models.Locatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Judet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numar_locuitori")
                        .HasColumnType("int");

                    b.Property<string>("Oras")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locatii");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Judet = "Bucuresti",
                            Numar_locuitori = 10000,
                            Oras = "Bucuresti"
                        },
                        new
                        {
                            Id = 2,
                            Judet = "Ilfov",
                            Numar_locuitori = 2500,
                            Oras = "Buftea"
                        },
                        new
                        {
                            Id = 3,
                            Judet = "Prahova",
                            Numar_locuitori = 7000,
                            Oras = "Ploiesti"
                        });
                });

            modelBuilder.Entity("paw_examen.Server.Models.Protest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocatieId")
                        .HasColumnType("int");

                    b.Property<int>("Numar_participanti")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocatieId");

                    b.ToTable("Proteste");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2022, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Denumire = "Protest 1",
                            Descriere = "Protest despre problema 1",
                            LocatieId = 1,
                            Numar_participanti = 9000
                        },
                        new
                        {
                            Id = 2,
                            Data = new DateTime(2022, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Denumire = "Protest 2",
                            Descriere = "Protest despre problema 2",
                            LocatieId = 1,
                            Numar_participanti = 3700
                        },
                        new
                        {
                            Id = 3,
                            Data = new DateTime(2022, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Denumire = "Protest 3",
                            Descriere = "Protest despre problema 3",
                            LocatieId = 1,
                            Numar_participanti = 7000
                        },
                        new
                        {
                            Id = 4,
                            Data = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Denumire = "Protest 4",
                            Descriere = "Protest despre problema 4",
                            LocatieId = 3,
                            Numar_participanti = 500
                        },
                        new
                        {
                            Id = 5,
                            Data = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Denumire = "Protest 5",
                            Descriere = "Protest despre problema 5",
                            LocatieId = 2,
                            Numar_participanti = 1000
                        });
                });

            modelBuilder.Entity("paw_examen.Server.Models.Protest", b =>
                {
                    b.HasOne("paw_examen.Server.Models.Locatie", "Locatie")
                        .WithMany()
                        .HasForeignKey("LocatieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locatie");
                });
#pragma warning restore 612, 618
        }
    }
}
